pipeline {
  agent {
    node { 
      label 'slave'
    } 
  }

  parameters {
    string(name: 'GIT_REPO_URL', defaultValue: 'https://github.com/mankinimbom/maven.git', description: 'URL of the Git repository for the source code')
    string(name: 'GIT_TEST_REPO_URL', defaultValue: 'https://github.com/mankinimbom/testingproject.git', description: 'URL of the Git repository for the testing code')
    string(name: 'RECIPIENT_EMAIL', defaultValue: 'ankinimbommichaely@gmail.com', description: 'Email address to send notifications')
    string(name: 'DEPLOYMENT_SERVER_QA', defaultValue: 'http://10.0.0.120:8080/', description: 'URL of the QA server for deployment')
    string(name: 'DEPLOYMENT_SERVER_PROD', defaultValue: 'http://10.0.0.76:8080/', description: 'URL of the Production server for deployment')
    string(name: 'QA_CREDENTIALS_ID', defaultValue: 'fe5d098e-ac5b-4a3e-b521-2976432e100f', description: 'Credentials ID for the QA server')
    string(name: 'PROD_CREDENTIALS_ID', defaultValue: 'e49623cc-8130-408e-a881-17d029847267', description: 'Credentials ID for the Production server')
    string(name: 'PROMETHEUS_SERVER', defaultValue: 'http://10.0.0.76:9090/-/healthy', description: 'URL of the Prometheus server for monitoring checks')
    string(name: 'GRAFANA_SERVER', defaultValue: 'http://10.0.0.76:3000/api/health', description: 'URL of the Grafana server for monitoring checks')
  }

  stages {
    stage('ContinuesDownloadCodeFromGitHubRepo') {
      steps {
        script{
          try {
            git "${params.GIT_REPO_URL}"
          } catch(Exception e1) {
            emailext body: 'Jenkins was unable to download the code from the GitHub repository', to: "${params.RECIPIENT_EMAIL}", subject: 'Code Download failed'
            error("Git clone failed")
          }
        }
      }
    }

    stage('ContinueBuild') {
      steps {
        script{
          try {
            sh 'mvn clean install package'
          } catch(Exception e2) {
            emailext body: 'Jenkins was unable to build the code', to: "${params.RECIPIENT_EMAIL}", subject: 'Code Build failed'
            error("Maven build failed")
          }
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        script{
          try {
            withSonarQubeEnv('My SonarQube Server') {
              sh 'mvn sonar:sonar'
            }
          } catch(Exception e) {
            emailext body: 'SonarQube analysis failed', to: "${params.RECIPIENT_EMAIL}", subject: 'SonarQube Analysis failed'
            error("SonarQube Analysis failed")
          }
        }
      }
    }

    stage('CopyArtifactToTestServer') {
      steps {
        script{
          try {
            deploy adapters: [tomcat9(credentialsId: "${params.QA_CREDENTIALS_ID}", path: '', url: "${params.DEPLOYMENT_SERVER_QA}")], contextPath: 'myapp', war: '**/*.war'
          } catch(Exception e3) {
            emailext body: 'Jenkins was unable to deploy the code to tomcat QA', to: "${params.RECIPIENT_EMAIL}", subject: 'Deploy to QA failed'
            error("Deployment to QA failed")
          }
        }
      }
    }

    stage('ContinuesTestingArtifact') {
      steps {
        script{
          try {
            git "${params.GIT_TEST_REPO_URL}"
            sh 'java -jar /home/mint/workspace/DeclarativePipe/testing.jar'
          } catch(Exception e4) {
            emailext body: 'Jenkins was unable to run the tests', to: "${params.RECIPIENT_EMAIL}", subject: 'Code Testing failed'
            error("Testing failed")
          }
        }
      }
    }

    stage('ContinuesDeployToTomcatServer') {
      steps {
        script{
          try {
            input message: 'Approve deployment?', ok: 'Approve', submitter: 'mike'
            
            deploy adapters: [tomcat9(credentialsId: "${params.PROD_CREDENTIALS_ID}", path: '', url: "${params.DEPLOYMENT_SERVER_PROD}")], contextPath: 'myapp', war: '**/*.war'
          } catch(Exception e5) {
            emailext body: 'Jenkins was unable to deploy the build artifact to PROD', to: "${params.RECIPIENT_EMAIL}", subject: 'Deploy to PROD failed'
            error("Deployment to PROD failed")
          }
        }
      }
    }

    stage('Check Monitoring Services') {
      steps {
        script{
          try {
            sh '''
            echo "Checking Prometheus..."
            curl -f "${params.PROMETHEUS_SERVER}"
            echo "Checking Grafana..."
            curl -f "${params.GRAFANA_SERVER}"
            '''
          } catch(Exception e) {
            emailext body: 'Monitoring services are not available', to: "${params.RECIPIENT_EMAIL}", subject: 'Monitoring services check failed'
            error("Monitoring services check failed")
          }
        }
      }
    }
  }
}
